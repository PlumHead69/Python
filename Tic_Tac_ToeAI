import random

strats=[

    [1, [[9,3,7], [4,2,3,7]]],
    [3, [[7,9,1], [6,1,2,9]]],
    [7, [[3,9,1], [1,8,9,4]]],
    [9, [[1,3,7], [3,7,8,6]]]

]

def printBoard(board):
    print('   |   |')
    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])
    print('   |   |')
    print('----------')
    print('   |   |')
    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('   |   |')
    print('----------')
    print('   |   |')
    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])
    print('   |   |')


def isWinner(board, current_player):
    return ((board[7] == current_player and board[8] == current_player
             and board[9] == current_player)
            or (board[4] == current_player and board[5] == current_player
                and board[6] == current_player)
            or (board[1] == current_player and board[2] == current_player
                and board[3] == current_player)
            or (board[7] == current_player and board[4] == current_player
                and board[1] == current_player)
            or (board[8] == current_player and board[5] == current_player
                and board[2] == current_player)
            or (board[9] == current_player and board[6] == current_player
                and board[3] == current_player)
            or (board[7] == current_player and board[5] == current_player
                and board[3] == current_player)
            or (board[9] == current_player and board[5] == current_player
                and board[1] == current_player))


def isSpaceAvailable(board, move):
    return board[move] == ' '


def makeMove(board, current_player, move):
    if isSpaceAvailable(board, move):
        board[move] = current_player


def isBoardOccupied(board):
    for pos in range(1, 10):
        if isSpaceAvailable(board, pos):
            return False
    return True


def boardCopy(board):
    cloneBoard = []
    for pos in board:
        cloneBoard.append(pos)

    return cloneBoard


def getRandomMove(board, moves):
    availableMoves = []
    for move in moves:
        if isSpaceAvailable(board, move):
            availableMoves.append(move)

    if availableMoves.__len__() != 0:
        return random.choice(availableMoves)
    else:
        return None


def makeComputerMove(board, computerPlayer,strat,starter):
    if computerPlayer == 'X':
        humanPlayer = 'O'
    else:
        humanPlayer = 'X'
    # part 1
    for pos in range(1, 10):
        # pos is for position of board layout
        clone = boardCopy(board)
        if isSpaceAvailable(clone, pos):
            makeMove(clone, computerPlayer, pos)
            if isWinner(clone, computerPlayer):
                return pos

    for pos in range(1, 10):
        clone = boardCopy(board)
        if isSpaceAvailable(clone, pos):
            makeMove(clone, humanPlayer, pos)
            if isWinner(clone, humanPlayer):
                return pos

    if starter=="computer":
        
        if isSpaceAvailable(board, strat[0]):
            return strat[0]

        corners = strat[1][0]
        if board[5] == humanPlayer:
            return strat[1][0][0]

        if board[strat[1][0][0]] != humanPlayer:
            edges = [2, 4, 6, 8]
            for k in edges:
                if board[k] == humanPlayer:
                    if isSpaceAvailable(board, 5):
                        return 5

        
        if board[2] == humanPlayer and board[5] == computerPlayer:
            return strat[1][1][0]
        elif board[4] == humanPlayer and board[5] == computerPlayer:
            return strat[1][1][1]
        elif board[6] == humanPlayer and board[5] == computerPlayer:
            return strat[1][1][2]
        elif board[8] == humanPlayer and board[5] == computerPlayer:
            return strat[1][1][3]
        

        return getRandomMove(board, corners)


    elif starter == "human":
        #main objective: not to lose!
        corners=[1,3,7,9]
        endges=[2,4,6,8]

        #early games strat
        if board[3] == humanPlayer:
            if isSpaceAvailable(board,7):
                return 7
        elif board[7] == humanPlayer:
            if isSpaceAvailable(board,3):
                return 3
        elif board[9] == humanPlayer:
            if isSpaceAvailable(board,1):
                return 1
        elif board[1] == humanPlayer:
            if isSpaceAvailable(board,9):
                return 9
        
        for i in endges:
            if board[i] == humanPlayer:
                if isSpaceAvailable(board,5):
                    return 5

        # The Tie Strat
        for k in corners:
            if board[k] != humanPlayer and board[k] != computerPlayer:
                return k

        return getRandomMove(board, endges)


def makePlayerMove(board):
    move = ' '
    while move not in '1 2 3 4 5 6 7 8 9'.split() or not isSpaceAvailable(
            board, int(move)):
        print('What is your next move? (choose between 1-9)')
        move = int(input().strip())
        return move


def main():
    while True:
        board = [' '] * 10
        player, computer = 'X', 'O'
        botStrat=random.choice(strats)
        turns=["human","computer"]
        turn = "human"
        print("The " + turn + " will start the game")
        isGameRunning = True
        
        while isGameRunning:
            if turn == 'human':
                printBoard(board)
                move = makePlayerMove(board)
                makeMove(board, player, move)
                if isWinner(board, player):
                    printBoard(board)
                    print("You won the game!")
                    isGameRunning = False
                else:
                    if isBoardOccupied(board):
                        print("Game is a tie")
                        break
                    else:
                        turn = 'computer'

            else:
                move = makeComputerMove(board, computer,botStrat,turn)
                makeMove(board, computer, move)
                if isWinner(board, computer):
                    printBoard(board)
                    print('You loose!')
                    isGameRunning = False
                else:
                    if isBoardOccupied(board):
                        print("Game is tie")
                        break
                    else:
                        turn = 'human'


if __name__ == '__main__':
    main()  # calling main function
